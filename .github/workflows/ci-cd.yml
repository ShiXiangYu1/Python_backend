name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  # 代码质量检查任务
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy black isort
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: |
          black --check .

      - name: Sort imports with isort
        run: |
          isort --check --profile black .

  # 单元测试与集成测试任务
  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "sqlite:///test.db"
      APP_ENV: "testing"
      APP_DEBUG: "true"
      SECRET_KEY: "testing_secret_key"
      JWT_SECRET_KEY: "testing_jwt_secret_key"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: |
          pytest tests/unit/ tests/services/ -v --cov=app

      - name: Run API tests
        run: |
          pytest tests/api/ -v --cov=app --cov-append

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  # 构建Docker镜像任务
  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: your-dockerhub-username/ai-model-platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=your-dockerhub-username/ai-model-platform:buildcache
          cache-to: type=registry,ref=your-dockerhub-username/ai-model-platform:buildcache,mode=max

  # 部署任务
  deploy:
    name: Deploy Application
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to server
        env:
          DEPLOY_ENV: ${{ github.event.inputs.deploy_env || 'dev' }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DOCKER_IMAGE: your-dockerhub-username/ai-model-platform:${{ github.sha }}
        run: |
          # 准备远程部署脚本
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # 进入项目目录
          cd /opt/ai-model-platform
          
          # 拉取最新的Docker镜像
          docker pull ${DOCKER_IMAGE}
          
          # 根据环境选择配置文件
          if [ "${DEPLOY_ENV}" = "prod" ]; then
            COMPOSE_FILE="docker-compose.yml -f docker-compose.prod.yml"
          else
            COMPOSE_FILE="docker-compose.yml -f docker-compose.override.yml"
          fi
          
          # 使用新镜像更新服务
          DOCKER_IMAGE=${DOCKER_IMAGE} docker-compose -f ${COMPOSE_FILE} up -d --no-deps app
          
          # 运行数据库迁移
          docker-compose -f ${COMPOSE_FILE} exec -T app alembic upgrade head
          
          # 清理未使用的镜像
          docker image prune -af
          EOL
          
          # 将部署脚本传输到远程服务器并执行
          chmod +x deploy.sh
          scp deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/deploy.sh
          ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'bash /tmp/deploy.sh && rm /tmp/deploy.sh'

      - name: Verify deployment
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'curl -s http://localhost:8000/api/v1/health' 